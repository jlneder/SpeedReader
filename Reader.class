import java.util.Scanner;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.io.File;
import java.io.IOException;
/**
 * Reads in File
 * Breaks up the String (file) into chunks
 *  - Breaks up the file into sentences, and chunks it from there
 *  
 *  
 *  Desired Length = approx amount of words
 *  - Chunks will not necessarily be broken up by the number of words but rather the field of view.
 *  - Chunks will be approximately the same length
 * 
 * 
 */
public class Reader
{    
    private String file;
    private Scanner in;
    private ArrayList<Sentence> sentences; 
    private ArrayList<Chunk> chunks;
    private Set<String> prepositions;
    private Set<String> honorifics;
    private int[] length_hist;
    private int desired_length;

    /**
     * Read in a textfile
     * File -> String
     * 
     * Desired_Length is the approximate amount of words
     * in each chunk.
     * 
     * Ex. Desired_Length = 3;
     * Num Words in Chunk: 2 - 4
     * 
     */
    public Reader(int desired_length)
    {
        // 1. read in file  
        file = "";
        sentences = new ArrayList<Sentence>();
        chunks = new ArrayList<Chunk>();
        prepositions = new HashSet <String>();
        honorifics = new HashSet<String>();
        length_hist = new int[100];
        this.desired_length = desired_length;

        loadHonorifics();

        try{
            in = new Scanner(new File("ivanthefool.txt"));
        }catch(IOException i){
            System.out.println("Error: " + i.getMessage());
        }
        String text = "";
        while(in.hasNextLine()){
            text = in.nextLine();
            file += (text + " ");
            //System.out.println(text);
        }

        System.out.println(honorifics.contains("Mr."));
        //System.out.println(file);
        createSentences();

        // put all the chunks created into chunks arrayList
        storyToChunks();
        trimSpaces();

    }
    
    /**
     *  Loads .txt file that contains a number of honorifics common in the english language
     *  Allows the algorithm to avoid chunking sentences at wrong areas.
     */
    public void loadHonorifics(){
        try{
            in = new Scanner(new File("english_honorifics.txt"));
        }catch(IOException i){
            System.out.println("Error: " + i.getMessage());
        }

        String text = "";
        while(in.hasNextLine()){
            text = in.nextLine();
            honorifics.add(text);
        }

        for(String str: honorifics){
            System.out.println(str);
        }
    }

    /**
     * String (file) -> String
     *  - divides the file into sentences 
     *  - sentences are broken up by '!' , '.', '?'
     */
    public void createSentences()
    {
        // ----- Main Sentence Separator
        // - '.' , '!', '?'
        System.out.println(file);
        int exclamation = 0;
        int question_mark = 0;
        int period = 0;
        String text_before_period = "";
        //System.out.println(file.indexOf("!"));
        //System.out.println(file.indexOf("."));
        //System.out.println(file.indexOf("?"));
        int add = 0;
        while(file.indexOf(".") > -1 || file.indexOf("?") > -1 || file.indexOf("!") > -1){
            exclamation = file.indexOf("!");
            question_mark = file.indexOf("?");
            period = file.indexOf(".");
            System.out.println("HIHI");
            // get the correct index of the period (can be part of a honorific)
            // while text before period is a honorific, find another period.

            // getting text_before_period
            add = 0;
            System.out.println(text_before_period);
            text_before_period = file.substring(period - 3, period + 1);
            
            if(text_before_period.indexOf(" ") > -1){
                int space = text_before_period.indexOf(" ");
                text_before_period = text_before_period.substring(space + 1);
                System.out.println(text_before_period);
                add += period;
            }

            // checking if honorific
            while(honorifics.contains(text_before_period)){
                String temp = file.substring(period + 1);
                System.out.println(temp);
                period += temp.indexOf(".") + 1;
                System.out.println(file.substring(period - 1, period + 1));
                
                // getting next text_before_period
                text_before_period = file.substring(period - 4, period + 1);
                System.out.println(period);
                if(text_before_period.indexOf(" ") > -1){
                    int space = text_before_period.indexOf(" ");
                    text_before_period = text_before_period.substring(space + 1);
                }
                System.out.println("Text Before Period: " + text_before_period);
                System.out.println(honorifics.contains(text_before_period));
                
            }
            
            System.out.println(period);
            System.out.println(question_mark);
            System.out.println(exclamation);
            System.out.println(file.substring(period - 1, period + 1));
            
            if((period < question_mark || question_mark == -1) && 
            (period < exclamation || exclamation == -1) && 
            ((file.charAt(period + 1) == ' ') || (file.charAt(period + 1) == '”') ||
                (file.charAt(period + 1) == '"')) &&
            period != -1){
                System.out.println("...................");
                if(file.charAt(period + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, period + 2), desired_length));
                    file = file.substring(period + 2);
                } // period before quotation
                // include quote into sentence. 
                else if(file.charAt(period + 1) == '”' || file.charAt(period + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, period + 3), desired_length));
                    file = file.substring(period + 3);

                }
            }    //question mark
            else if((question_mark < period || period == -1) && 
            (question_mark < exclamation || exclamation == -1) && 
            ((file.charAt(question_mark + 1) == ' ') || (file.charAt(question_mark + 1) == '”') ||
                (file.charAt(question_mark + 1) == '"')) &&
            question_mark != -1){
                //System.out.println("???????????????????");
                if(file.charAt(question_mark + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("?") + 2), desired_length));
                    file = file.substring(file.indexOf("?") + 1);
                } // question mark before quotation
                // include quote into sentence. 
                else if(file.charAt(question_mark + 1) == '”' || file.charAt(question_mark + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("?") + 3), desired_length));
                    file = file.substring(file.indexOf("?") + 2);

                }
            }
            else if((exclamation < period || period == -1) && 
            (exclamation < question_mark || question_mark == -1)&& 
            ((file.charAt(exclamation + 1) == ' ') || (file.charAt(exclamation + 1) == '”') ||
                (file.charAt(exclamation + 1) == '"')) &&
            exclamation != -1){
                //System.out.println("!!!!!!!!!!!!!!!!!!!!");
                if(file.charAt(exclamation + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("!") + 2), desired_length));
                    file = file.substring(file.indexOf("!") + 1);
                } // period before quotation
                // include quote into sentence. 
                else if(file.charAt(exclamation + 1) == '”' || file.charAt(exclamation + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("!") + 3), desired_length));
                    file = file.substring(file.indexOf("!") + 2);

                }
            }
            //System.out.println("BUG");
        }

        
        System.out.println(" =============== ");
        for(int i = 0; i < sentences.size(); i++){
        System.out.println(sentences.get(i).getSentence());
        }
        
    }
    
    /**
     *  updates the chunk arrayList to contain all the chunks of all the sentences
     */
    public void storyToChunks(){
        for(Sentence sentence:sentences){
            for(Chunk chunk:sentence.getChunks()){
                chunks.add(chunk);
            }
        }
    }

    /**
     *  print function 
     */
    public void printStoryInChunks(){
        for(Chunk chunk:chunks){
            System.out.println(chunk.getText());

        }
    }

    /**
     * ----- NOT USING
     * 
     *  ASSUME: maxwords: [3,7]
     */
    public void breakDown(int max_words){
        ArrayList<Chunk> temp_chunks = new ArrayList<Chunk>();
        //int[] chunk_length_hist = new int[100]; // set to arbitrary large number
        String chunk_text;
        int chunk_length;
        int num_chunks = 0;
        double ratio = 0.0;
        int split_pos = 0;
        int nearest_space = 0; // set to arbitrary large number
        int compare = 0;
        int temp = 0;
        // BUG 
        for(Chunk chunk: chunks){
            // chunks that are greater than max_words are split into halves, thirds, etc. 
            chunk_text = chunk.getText();
            chunk_length = chunk.getText().length();
            temp = 0;
            if(chunk.getNumWords() > max_words){
                // determines how many chunks will be made from larger chunk
                if((chunk.getNumWords() / (double)(max_words)) > 2){ // there are more than double the number of words than max_words
                    //int remainder = chunk.getNumWords() % max_words;                    
                    if(((int)(((double)(chunk.getNumWords()) / max_words) + 0.5) == chunk.getNumWords()/max_words)) {
                        num_chunks = chunk.getNumWords()/max_words;
                    }
                    else
                    {
                        num_chunks = (chunk.getNumWords() / max_words) + 1; 
                    }
                }
                else{ // split it int halves
                    num_chunks = 2;
                }

                // splitting into chunks
                for(int i = 1; i < num_chunks; i++){
                    ratio = ((double)(i)) / num_chunks;
                    split_pos = (int)(ratio * chunk_length);
                    nearest_space = 10000000;
                    compare = 1000000;
                    for(int space_pos: chunk.getSpacePositions()){
                        // find nearest space
                        if(Math.abs(space_pos - split_pos) < compare){
                            //System.out.println("CHANGED");
                            nearest_space = space_pos;
                            compare = Math.abs(space_pos - split_pos);
                        }
                    }

                    // make chunks
                    System.out.println(i + " " + num_chunks);
                    System.out.println("ChunkText: " + chunk_text + "*");
                    System.out.println("NearestSpace: " + (nearest_space - temp));
                    System.out.println("text around nearest space: " + chunk_text.charAt(nearest_space - temp - 1) + chunk_text.charAt(nearest_space - temp) + chunk_text.charAt(nearest_space - temp + 1));

                    System.out.println("chunk text before");
                    System.out.println(chunk_text);
                    temp_chunks.add(new Chunk(chunk_text.substring(0, nearest_space - temp + 1)));
                    chunk_text = chunk_text.substring(nearest_space - temp + 1);
                    temp = nearest_space;

                    //System.out.println("chunk text after");
                    //System.out.println(chunk_text);

                }
                temp_chunks.add(new Chunk(chunk_text));
            }
            else{
                temp_chunks.add(chunk);
            }
            // get chunk length
            // get average word length from chunks
            // multiply by max_words (desired number of words)

        }

        chunks.clear();

        // creates a histogram to identify most common length
        // this will become "margin" or "reader's field of view" for the text
        for(Chunk chunk: temp_chunks){
            length_hist[chunk.getLength()] += 1; 
            chunks.add(chunk);
        }

    }

    public void printHistogram(){
        int num = 0;
        for(int i: length_hist){
            System.out.println(num + ": " + i);
            num++;
        }
    }

    /**
     * 
     * --- NOT USING
     * 
     * 
     *  Histogram data will determine the field of view
     *  Will parse up so that the chunks are around the same length.
     *  This will aid the user's eyes by making chunks consistent in length.
     */
    public void parseUp(){
        ArrayList<Chunk> temp_chunks = new ArrayList<Chunk>();
        int[] word_lengths = new int[100]; // for word lengths
        int chunk_mode_length = 0;
        int average_word_length = 0;
        int num_words = 0;
        int average_chunk_length = 0;
        int num_chunks = 0;

        /**
        // get most frequent length, parsing through histogram
        for(int index = 0; index < length_hist.length; index++){
        if(length_hist[index] > chunk_mode_length){
        chunk_mode_length = index;
        }
        }
         **/

        // get the mean of the lengths
        for(Chunk chunk: chunks){ 
            for(String word: chunk.getWords()){
                num_words++;
                average_word_length += word.length();
            }
            average_chunk_length += chunk.getText().length();
            num_chunks++;
        }

        average_word_length = (int)(((double)(average_word_length)/ num_words) + 0.5);
        average_chunk_length = (int)(((double)(average_chunk_length)/ num_chunks) + 0.5);

        //System.out.println("Chunk Mode Length: " + chunk_mode_length);
        System.out.println("Average Word Length: " + average_word_length);
        System.out.println("Average Chunk Length: " + average_chunk_length);
        // linear parsing

        // ex. chunk 1, chunk 2, chunk 3
        // chunk1 +! chunk2 if chunk1 has '.', '?', '!', '"',
        // hard mark '.', '?', '!', '"',
        // add chunks to temp_chunks
        int upperbound = average_chunk_length + average_word_length;
        int lowerbound = average_chunk_length - average_word_length;
        int combo1 = 0;
        int combo2 = 0;
        int combo3 = 0;
        int lastchar_before = 0;
        int lastchar_present = 0;
        for(int i = 1; i < chunks.size() - 1; i++){
            // check chunk before and chunk after
            // start at [2nd, 2nd to last]
            Chunk before_chunk = chunks.get(i - 1);
            Chunk present_chunk =  chunks.get(i);
            Chunk after_chunk = chunks.get(i + 1);

            // get lengths combined and compare (chunk(i) + chunk(i + 1)) & (chunk(i) + chunk(i - 1))
            // combo 1 = chunks(i) + chunks(i - 1)
            // combo 2 = chunks(i) + chunks(i + 1)

            combo1 = chunks.get(i - 1).getText().length() + chunks.get(i).getText().length();
            combo2 = chunks.get(i + 1).getText().length() + chunks.get(i).getText().length();
            combo3 = chunks.get(i - 1).getText().length() + chunks.get(i).getText().length() + chunks.get(i + 1).getText().length();
            // if all three chunks are in bounds, ignore
            if(before_chunk.inBounds(lowerbound, upperbound) &&
            present_chunk.inBounds(lowerbound, upperbound) &&
            after_chunk.inBounds(lowerbound, upperbound)){
                // add the three chunks and go to next 3.
                temp_chunks.add(before_chunk);
                temp_chunks.add(present_chunk);
                temp_chunks.add(after_chunk);
                i += 2;
            } // if before_chunk is appicable 
            else if(before_chunk.inBounds(lowerbound, upperbound)){
                temp_chunks.add(before_chunk);

            }
            // if they are both in range, compare the two
            else if((lowerbound <= combo1 && combo1 <= upperbound) &&
            (lowerbound <= combo2 && combo2 <= upperbound)){
                // take combo2, 
                // cannot be hardbreak in the middle 
                lastchar_before = before_chunk.getText().length() - 1;
                lastchar_present = present_chunk.getText().length() - 1;
                if((before_chunk.getText().charAt(lastchar_before) == '.') || (before_chunk.getText().charAt(lastchar_before) == '"') ||
                (before_chunk.getText().charAt(lastchar_before) == '”') || (before_chunk.getText().charAt(lastchar_before) == ';') ||
                (before_chunk.getText().charAt(lastchar_before) == '?') || (before_chunk.getText().charAt(lastchar_before) == '!')){
                    temp_chunks.add(before_chunk);
                    temp_chunks.add(new Chunk(present_chunk.getText() + after_chunk.getText())); 
                } // take combo1
                else if((present_chunk.getText().charAt(lastchar_present) == '.') || (present_chunk.getText().charAt(lastchar_present) == '"') ||
                (present_chunk.getText().charAt(lastchar_present) == '”') || (present_chunk.getText().charAt(lastchar_present) == ';') ||
                (present_chunk.getText().charAt(lastchar_present) == '?') || (present_chunk.getText().charAt(lastchar_present) == '!')){
                    temp_chunks.add(new Chunk(before_chunk.getText() + present_chunk.getText()));
                    i++;
                }
            } // combo1 inbounds
            else if(lowerbound <= combo1 && combo1 <= upperbound){
                // first chunk cannot have hardbreak
                if((present_chunk.getText().charAt(lastchar_present) == '.') || (present_chunk.getText().charAt(lastchar_present) == '"') ||
                (present_chunk.getText().charAt(lastchar_present) == '”') || (present_chunk.getText().charAt(lastchar_present) == ';') ||
                (present_chunk.getText().charAt(lastchar_present) == '?') || (present_chunk.getText().charAt(lastchar_present) == '!')){
                    temp_chunks.add(new Chunk(before_chunk.getText() + present_chunk.getText()));
                    i++;
                }
            } // combo2 inbounds
            else if(lowerbound <= combo2 && combo2 <= upperbound){
                if((before_chunk.getText().charAt(lastchar_before) == '.') || (before_chunk.getText().charAt(lastchar_before) == '"') ||
                (before_chunk.getText().charAt(lastchar_before) == '”') || (before_chunk.getText().charAt(lastchar_before) == ';') ||
                (before_chunk.getText().charAt(lastchar_before) == '?') || (before_chunk.getText().charAt(lastchar_before) == '!')){
                    temp_chunks.add(before_chunk);
                    temp_chunks.add(new Chunk(present_chunk.getText() + after_chunk.getText())); 
                } 
            } // all added up are in bounds
            else if(lowerbound <= combo3 && combo3 <= upperbound){
                if(((before_chunk.getText().charAt(lastchar_before) == '.') || (before_chunk.getText().charAt(lastchar_before) == '"') ||
                    (before_chunk.getText().charAt(lastchar_before) == '”') || (before_chunk.getText().charAt(lastchar_before) == ';') ||
                    (before_chunk.getText().charAt(lastchar_before) == '?') || (before_chunk.getText().charAt(lastchar_before) == '!'))
                &&
                ((present_chunk.getText().charAt(lastchar_present) == '.') || (present_chunk.getText().charAt(lastchar_present) == '"') ||
                    (present_chunk.getText().charAt(lastchar_present) == '”') || (present_chunk.getText().charAt(lastchar_present) == ';') ||
                    (present_chunk.getText().charAt(lastchar_present) == '?') || (present_chunk.getText().charAt(lastchar_present) == '!'))){
                    temp_chunks.add(new Chunk(before_chunk.getText() + present_chunk.getText() + after_chunk.getText()));
                    i+= 2;
                }
            }
            else{

            }
        }
    }

    /**
     *  Take out extra spaces (double spaces '  ')
     *  
     */
    public void trimSpaces(){
        ArrayList<Chunk> temp_chunks = new ArrayList<Chunk>();
        String text = "";
        int index = 0;
        for(Chunk chunk: chunks){
            text = chunk.getText();
            while(text.indexOf("  ") > -1){
                index = text.indexOf("  ");
                text = text.substring(0, index + 1) + text.substring(index + 2);
            }
            temp_chunks.add(new Chunk(text));
        }
        
        chunks.clear();
        for(Chunk chunk: temp_chunks){
            chunks.add(chunk);
        }
    }
}

