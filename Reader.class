package com.speedreader;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.io.File;
import java.io.IOException;
/**
 * Reads in File
 * Breaks up the String (file) into chunks
 *  - Breaks up the file into sentences, and chunks it from there
 *  
 *  
 *  Desired Length = approx amount of words
 *  - Chunks will not necessarily be broken up by the number of words but rather the field of view.
 *  - Chunks will be approximately the same length
 * 
 * 
 */


public class Reader
{   
	
	
	
	
	private static int RIGHT_SPECIAL_DOUBLEQUOTE = 8221;
    private String file;
    private Scanner in;
    private ArrayList<Sentence> sentences; 
    private ArrayList<Chunk> chunks;
    private Set<String> honorifics;
    private int[] length_hist;
    private int desired_length;

    /**
     * Read in a textfile
     * File -> String
     * 
     * Desired_Length is the approximate amount of words
     * in each chunk.
     * 
     * Ex. Desired_Length = 3;
     * Num Words in Chunk: 2 - 4
     * 
     */
    public Reader(int desired_length, String filename)
    {
        // 1. read in file  
        file = "";
        sentences = new ArrayList<Sentence>();
        chunks = new ArrayList<Chunk>();
        honorifics = new HashSet<String>();
        length_hist = new int[100];
        this.desired_length = desired_length;

        loadHonorifics();

        try{
            in = new Scanner(new File(filename));
            System.out.println();
            in.toString();
            System.out.println();
        }catch(IOException i){
            System.out.println("Error: " + i.getMessage());
        }
        String text = "";
        while(in.hasNextLine()){
            text = in.nextLine();
            file += (text + " ");
            //System.out.println(text);
        }

        System.out.println(honorifics.contains("Mr."));
        //System.out.println(file);
        createSentences();

        // put all the chunks created into chunks arrayList
        storyToChunks();
        trimSpaces();
        
        
        

    }
    
    /**
     *  Loads .txt file that contains a number of honorifics common in the english language
     *  Allows the algorithm to avoid chunking sentences at wrong areas.
     */
    public void loadHonorifics(){
        try{
            in = new Scanner(new File("english_honorifics.txt"));
        }catch(IOException i){
            System.out.println("Error: " + i.getMessage());
        }

        String text = "";
        while(in.hasNextLine()){
            text = in.nextLine();
            honorifics.add(text);
        }

        for(String str: honorifics){
            System.out.println(str);
        }
    }
    
    
    public void createSentences1(){
        
        
    }
    
    
    

    /**
     * String (file) -> String
     *  - divides the file into sentences 
     *  - sentences are broken up by '!' , '.', '?'
     */
    public void createSentences()
    {
        // ----- Main Sentence Separator
        // - '.' , '!', '?'
        System.out.println(file);
        int exclamation = 0;
        int question_mark = 0;
        int period = 0;
        String text_before_period = "";
        //System.out.println(file.indexOf("!"));
        //System.out.println(file.indexOf("."));
        //System.out.println(file.indexOf("?"));
        
        while(file.indexOf(".") > -1 || file.indexOf("?") > -1 || file.indexOf("!") > -1){
            exclamation = file.indexOf("!");
            question_mark = file.indexOf("?");
            period = file.indexOf(".");
            System.out.println("HIHI");
            // get the correct index of the period (can be part of a honorific)
            // while text before period is a honorific, find another period.

            // getting text_before_period
            int add = 0;
            System.out.println(text_before_period);
            text_before_period = file.substring(period - 3, period + 1);
            
            if(text_before_period.indexOf(" ") > -1){
                int space = text_before_period.indexOf(" ");
                text_before_period = text_before_period.substring(space + 1);
                System.out.println(text_before_period);
                add += period;
            }

            // checking if honorific
            while(honorifics.contains(text_before_period)){
                String temp = file.substring(period + 1);
                System.out.println(temp);
                period += temp.indexOf(".") + 1;
                System.out.println(file.substring(period - 1, period + 1));
                
                // getting next text_before_period
                text_before_period = file.substring(period - 4, period + 1);
                System.out.println(period);
                if(text_before_period.indexOf(" ") > -1){
                    int space = text_before_period.indexOf(" ");
                    text_before_period = text_before_period.substring(space + 1);
                }
                System.out.println("Text Before Period: " + text_before_period);
                System.out.println(honorifics.contains(text_before_period));
                
            }
            
            System.out.println(period);
            System.out.println(question_mark);
            System.out.println(exclamation);
            System.out.println(file.substring(period - 1, period + 1));
            
            if((period < question_mark || question_mark == -1) && 
            (period < exclamation || exclamation == -1) && 
            // '”' has ascii value of 8221
            ((file.charAt(period + 1) == ' ') || ((int) file.charAt(period + 1) == RIGHT_SPECIAL_DOUBLEQUOTE) ||
                (file.charAt(period + 1) == '"')) &&
            period != -1){
                System.out.println("...................");
                if(file.charAt(period + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, period + 2), desired_length));
                    file = file.substring(period + 2);
                } // period before quotation
                // include quote into sentence. 
                else if((int)file.charAt(period + 1) == RIGHT_SPECIAL_DOUBLEQUOTE || file.charAt(period + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, period + 3), desired_length));
                    file = file.substring(period + 3);

                }
            }    //question mark
            else if((question_mark < period || period == -1) && 
            (question_mark < exclamation || exclamation == -1) && 
            ((file.charAt(question_mark + 1) == ' ') || ((int)file.charAt(question_mark + 1) == RIGHT_SPECIAL_DOUBLEQUOTE) ||
                (file.charAt(question_mark + 1) == '"')) &&
            question_mark != -1){
                //System.out.println("???????????????????");
                if(file.charAt(question_mark + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("?") + 2), desired_length));
                    file = file.substring(file.indexOf("?") + 1);
                } // question mark before quotation
                // include quote into sentence. 
                else if((int)file.charAt(question_mark + 1) == RIGHT_SPECIAL_DOUBLEQUOTE || file.charAt(question_mark + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("?") + 3), desired_length));
                    file = file.substring(file.indexOf("?") + 2);

                }
            }
            else if((exclamation < period || period == -1) && 
            (exclamation < question_mark || question_mark == -1)&& 
            ((file.charAt(exclamation + 1) == ' ') || ((int)file.charAt(exclamation + 1) == RIGHT_SPECIAL_DOUBLEQUOTE) ||
                (file.charAt(exclamation + 1) == '"')) &&
            exclamation != -1){
                //System.out.println("!!!!!!!!!!!!!!!!!!!!");
                if(file.charAt(exclamation + 1) == ' '){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("!") + 2), desired_length));
                    file = file.substring(file.indexOf("!") + 1);
                } // period before quotation
                // include quote into sentence. 
                else if((int)file.charAt(exclamation + 1) == RIGHT_SPECIAL_DOUBLEQUOTE || file.charAt(exclamation + 1) == '"'){
                    sentences.add(new Sentence(file.substring(0, file.indexOf("!") + 3), desired_length));
                    file = file.substring(file.indexOf("!") + 2);

                }
            }
            //System.out.println("BUG");
        }

        
        System.out.println(" =============== ");
        for(int i = 0; i < sentences.size(); i++){
        System.out.println(sentences.get(i).getSentence());
        }
        
    }
    
    /**
     *  updates the chunk arrayList to contain all the chunks of all the sentences
     */
    public void storyToChunks(){
        for(Sentence sentence:sentences){
            for(Chunk chunk:sentence.getChunks()){
                chunks.add(chunk);
            }
        }
    }

    /**
     *  print function 
     */
    public void printStoryInChunks(){
        for(Chunk chunk:chunks){
            System.out.println(chunk.getText());

        }
    }


    public void printHistogram(){
        int num = 0;
        for(int i: length_hist){
            System.out.println(num + ": " + i);
            num++;
        }
    }

    

    /**
     *  Take out extra spaces (double spaces '  ')
     *  
     */
    public void trimSpaces(){
        ArrayList<Chunk> temp_chunks = new ArrayList<Chunk>();
        String text = "";
        int index = 0;
        for(Chunk chunk: chunks){
            text = chunk.getText();
            while(text.indexOf("  ") > -1){
                index = text.indexOf("  ");
                text = text.substring(0, index + 1) + text.substring(index + 2);
            }
            temp_chunks.add(new Chunk(text));
        }
        
        chunks.clear();
        for(Chunk chunk: temp_chunks){
            chunks.add(chunk);
        }
    }
}

